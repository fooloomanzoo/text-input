{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`text-input` is an element that can:\n* guarantee **live**-data to be valid\n* be styled easily and in unified way\n\nExample:\n```html\n<text-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></text-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n:host {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.25);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder-color: pink;\n}\n```",
      "summary": "",
      "path": "text-input.js",
      "properties": [
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "the type of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\"",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 169,
              "column": 8
            },
            "end": {
              "line": 171,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pattern",
          "type": "string",
          "description": "regular expression pattern of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_patternChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "autocomplete",
          "type": "boolean | null | undefined",
          "description": "if `true`, autocomplete is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "spellcheck",
          "type": "boolean | null | undefined",
          "description": "if `true`, spellcheck is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "maximum length of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 259,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 358,
              "column": 4
            },
            "end": {
              "line": 361,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 244,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 210,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_computeMinlengthString",
          "description": "compute the minimal string the input is sized for",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 292,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 324,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 326,
              "column": 4
            },
            "end": {
              "line": 332,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 334,
              "column": 4
            },
            "end": {
              "line": 336,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 350,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 366,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 375,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 391,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_computInputValidationPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_patternChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_computeSpellcheckAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spellcheck"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_computeAutocompleteAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autocomplete"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "in a form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 156,
          "column": 7
        },
        "end": {
          "line": 160,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "TextInput",
      "attributes": [
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "the type of the native input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pattern",
          "description": "regular expression pattern of the input",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "autocomplete",
          "description": "if `true`, autocomplete is enabled",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "spellcheck",
          "description": "if `true`, spellcheck is enabled",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "maxlength",
          "description": "maximum length of the input",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "text-input",
      "mixins": [
        "TextInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a text-input",
      "summary": "",
      "path": "text-input.js",
      "properties": [
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "the type of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\"",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 169,
              "column": 8
            },
            "end": {
              "line": 171,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pattern",
          "type": "string",
          "description": "regular expression pattern of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_patternChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "autocomplete",
          "type": "boolean | null | undefined",
          "description": "if `true`, autocomplete is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "spellcheck",
          "type": "boolean | null | undefined",
          "description": "if `true`, spellcheck is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "maximum length of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 259,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 358,
              "column": 4
            },
            "end": {
              "line": 361,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 244,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 210,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_computeMinlengthString",
          "description": "compute the minimal string the input is sized for",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 292,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 324,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 326,
              "column": 4
            },
            "end": {
              "line": 332,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 334,
              "column": 4
            },
            "end": {
              "line": 336,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 350,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 366,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 375,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 391,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_computInputValidationPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ]
        },
        {
          "name": "_patternChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSpellcheckAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spellcheck"
            }
          ]
        },
        {
          "name": "_computeAutocompleteAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autocomplete"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 7
        },
        "end": {
          "line": 122,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "TextInputMixin",
      "attributes": [
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "the type of the native input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-pattern.js",
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pattern",
          "description": "regular expression pattern of the input",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "autocomplete",
          "description": "if `true`, autocomplete is enabled",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "spellcheck",
          "description": "if `true`, spellcheck is enabled",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "maxlength",
          "description": "maximum length of the input",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "InputPattern"
      ]
    }
  ]
}
