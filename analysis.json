{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`text-input` is an element that can:\n* guarantee **live**-data to be valid\n* be styled easily and in unified way\n\nExample:\n```html\n<text-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></text-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n:host {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.25);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder-color: pink;\n}\n```",
      "summary": "",
      "path": "text-input.js",
      "properties": [
        {
          "name": "pattern",
          "type": "string",
          "description": "regular expression pattern of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_patternChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "autocomplete",
          "type": "boolean | null | undefined",
          "description": "if `true`, autocomplete is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "spellcheck",
          "type": "boolean | null | undefined",
          "description": "if `true`, spellcheck is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "maximum length of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_computInputValidationPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_patternChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_computeSpellcheckAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spellcheck"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "_computeAutocompleteAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autocomplete"
            }
          ],
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/iron-form.html",
          "description": "in a form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 181,
          "column": 0
        },
        "end": {
          "line": 185,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "TextInput",
      "attributes": [
        {
          "name": "pattern",
          "description": "regular expression pattern of the input",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "autocomplete",
          "description": "if `true`, autocomplete is enabled",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "spellcheck",
          "description": "if `true`, spellcheck is enabled",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "TextInputMixin"
        },
        {
          "name": "maxlength",
          "description": "maximum length of the input",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "TextInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "text-input",
      "mixins": [
        "TextInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a text-input",
      "summary": "",
      "path": "text-input.js",
      "properties": [
        {
          "name": "pattern",
          "type": "string",
          "description": "regular expression pattern of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_patternChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "autocomplete",
          "type": "boolean | null | undefined",
          "description": "if `true`, autocomplete is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "spellcheck",
          "type": "boolean | null | undefined",
          "description": "if `true`, spellcheck is enabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "maximum length of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computInputValidationPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ]
        },
        {
          "name": "_patternChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pattern"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSpellcheckAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spellcheck"
            }
          ]
        },
        {
          "name": "_computeAutocompleteAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autocomplete"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 7
        },
        "end": {
          "line": 147,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "TextInputMixin",
      "attributes": [
        {
          "name": "pattern",
          "description": "regular expression pattern of the input",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "autocomplete",
          "description": "if `true`, autocomplete is enabled",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "spellcheck",
          "description": "if `true`, spellcheck is enabled",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "maxlength",
          "description": "maximum length of the input",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "InputPattern"
      ]
    }
  ]
}
